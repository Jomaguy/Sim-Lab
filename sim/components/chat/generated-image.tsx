'use client'

import { useState } from 'react'
import Image from 'next/image'
import { Download, ExpandIcon, ExternalLink, Info } from 'lucide-react'
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogTrigger
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip'

interface GeneratedImageProps {
  imageData: string
  prompt: string
  seed?: number
}

export function GeneratedImage({ imageData, prompt, seed }: GeneratedImageProps) {
  const [isOpen, setIsOpen] = useState(false)
  
  // Ensure the image data has the correct data URL prefix
  const formattedImageData = imageData.startsWith('data:') 
    ? imageData 
    : `data:image/png;base64,${imageData}`
  
  const handleDownload = () => {
    const link = document.createElement('a')
    link.href = formattedImageData
    link.download = `generated-image-${seed || Date.now()}.png`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }
  
  return (
    <div className="mt-2 mb-4 group">
      <div className="relative rounded-lg overflow-hidden border max-w-[300px]">
        <Image
          src={formattedImageData}
          alt={prompt}
          width={300}
          height={300}
          className="w-full object-cover"
        />
        
        <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
          <div className="flex gap-1">
            <Dialog open={isOpen} onOpenChange={setIsOpen}>
              <DialogTrigger asChild>
                <Button 
                  variant="secondary" 
                  size="icon" 
                  className="h-7 w-7 bg-black/50 hover:bg-black/80 backdrop-blur-sm border-0"
                >
                  <ExpandIcon className="h-3.5 w-3.5 text-white" />
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[600px]">
                <DialogHeader>
                  <DialogTitle>Generated Image</DialogTitle>
                </DialogHeader>
                <div className="flex flex-col gap-4">
                  <div className="relative aspect-square w-full overflow-hidden rounded-md">
                    <Image
                      src={formattedImageData}
                      alt={prompt}
                      fill
                      className="object-contain"
                    />
                  </div>
                  <div className="text-sm space-y-2">
                    <div>
                      <span className="font-medium">Prompt:</span> {prompt}
                    </div>
                    {seed !== undefined && (
                      <div>
                        <span className="font-medium">Seed:</span> {seed}
                      </div>
                    )}
                  </div>
                  <div className="flex justify-end">
                    <Button onClick={handleDownload}>
                      <Download className="mr-2 h-4 w-4" />
                      Download
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button 
                  variant="secondary" 
                  size="icon" 
                  className="h-7 w-7 bg-black/50 hover:bg-black/80 backdrop-blur-sm border-0"
                  onClick={handleDownload}
                >
                  <Download className="h-3.5 w-3.5 text-white" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Download image</TooltipContent>
            </Tooltip>
          </div>
        </div>
      </div>
      
      <div className="flex items-center mt-1 text-xs text-muted-foreground gap-1">
        <Info className="h-3 w-3" />
        <span>Generated by Stability AI</span>
        {seed !== undefined && (
          <span className="ml-2 font-mono">Seed: {seed}</span>
        )}
      </div>
    </div>
  )
} 